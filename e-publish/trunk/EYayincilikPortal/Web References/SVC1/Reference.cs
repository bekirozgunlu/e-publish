//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace EYayincilikPortal.SVC1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserPassOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMagazineOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMagazineOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMagazineOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSubCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSubCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRefereeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRefereeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRefereeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAuthorOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAuthorOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAuthorOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApproveSubCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddScienceCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubCategorytoPaperOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddReferencetoPaperOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteScienceCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateScienceCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPublisherOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePublisherOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePublisherOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddModeratorOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteModeratorOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateModeratorOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPaperOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePaperOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePaperOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackUpDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExaminePaperOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendOpinionToPublisherOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPaperToRefereeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPaperBackToWriterOperationCompleted;
        
        private System.Threading.SendOrPostCallback InviteRefereeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AnswerSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAnonimUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAnonimUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAnonimUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApproveCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPaperToMagazineOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishMagazineOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePublishedPaperIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSurveyQuestionaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSurveyQuestionaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSurveyQuestionaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPublishedMagazineOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePublishedMagazineOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePublishedMagazineOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPaperByAuthorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthorListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemAdminListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRefereeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModeratorListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMagazineListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublisheMagazineListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaperListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScienceCategoryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubCategoryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSSurveyQuestionaryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSurveyAnswerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSurveyAnswerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubCategoryToScienceCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubCategoryToMagazineOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublisherListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRefereeNotesOnPaperOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReferenceListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::EYayincilikPortal.Properties.Settings.Default.EYayincilikPortal_SVC1_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event GetUserByIDCompletedEventHandler GetUserByIDCompleted;
        
        /// <remarks/>
        public event CheckUserPassCompletedEventHandler CheckUserPassCompleted;
        
        /// <remarks/>
        public event AddMagazineCompletedEventHandler AddMagazineCompleted;
        
        /// <remarks/>
        public event DeleteMagazineCompletedEventHandler DeleteMagazineCompleted;
        
        /// <remarks/>
        public event UpdateMagazineCompletedEventHandler UpdateMagazineCompleted;
        
        /// <remarks/>
        public event AddSubCategoryCompletedEventHandler AddSubCategoryCompleted;
        
        /// <remarks/>
        public event DeleteSubCategoryCompletedEventHandler DeleteSubCategoryCompleted;
        
        /// <remarks/>
        public event UpdateSubCategoryCompletedEventHandler UpdateSubCategoryCompleted;
        
        /// <remarks/>
        public event AddRefereeCompletedEventHandler AddRefereeCompleted;
        
        /// <remarks/>
        public event DeleteRefereeCompletedEventHandler DeleteRefereeCompleted;
        
        /// <remarks/>
        public event UpdateRefereeCompletedEventHandler UpdateRefereeCompleted;
        
        /// <remarks/>
        public event AddAuthorCompletedEventHandler AddAuthorCompleted;
        
        /// <remarks/>
        public event DeleteAuthorCompletedEventHandler DeleteAuthorCompleted;
        
        /// <remarks/>
        public event UpdateAuthorCompletedEventHandler UpdateAuthorCompleted;
        
        /// <remarks/>
        public event ApproveSubCategoryCompletedEventHandler ApproveSubCategoryCompleted;
        
        /// <remarks/>
        public event AddScienceCategoryCompletedEventHandler AddScienceCategoryCompleted;
        
        /// <remarks/>
        public event AddSubCategorytoPaperCompletedEventHandler AddSubCategorytoPaperCompleted;
        
        /// <remarks/>
        public event AddReferencetoPaperCompletedEventHandler AddReferencetoPaperCompleted;
        
        /// <remarks/>
        public event DeleteScienceCategoryCompletedEventHandler DeleteScienceCategoryCompleted;
        
        /// <remarks/>
        public event UpdateScienceCategoryCompletedEventHandler UpdateScienceCategoryCompleted;
        
        /// <remarks/>
        public event AddPublisherCompletedEventHandler AddPublisherCompleted;
        
        /// <remarks/>
        public event DeletePublisherCompletedEventHandler DeletePublisherCompleted;
        
        /// <remarks/>
        public event UpdatePublisherCompletedEventHandler UpdatePublisherCompleted;
        
        /// <remarks/>
        public event AddModeratorCompletedEventHandler AddModeratorCompleted;
        
        /// <remarks/>
        public event DeleteModeratorCompletedEventHandler DeleteModeratorCompleted;
        
        /// <remarks/>
        public event UpdateModeratorCompletedEventHandler UpdateModeratorCompleted;
        
        /// <remarks/>
        public event AddPaperCompletedEventHandler AddPaperCompleted;
        
        /// <remarks/>
        public event DeletePaperCompletedEventHandler DeletePaperCompleted;
        
        /// <remarks/>
        public event UpdatePaperCompletedEventHandler UpdatePaperCompleted;
        
        /// <remarks/>
        public event BackUpDBCompletedEventHandler BackUpDBCompleted;
        
        /// <remarks/>
        public event ExaminePaperCompletedEventHandler ExaminePaperCompleted;
        
        /// <remarks/>
        public event SendOpinionToPublisherCompletedEventHandler SendOpinionToPublisherCompleted;
        
        /// <remarks/>
        public event SendPaperToRefereeCompletedEventHandler SendPaperToRefereeCompleted;
        
        /// <remarks/>
        public event SendPaperBackToWriterCompletedEventHandler SendPaperBackToWriterCompleted;
        
        /// <remarks/>
        public event InviteRefereeCompletedEventHandler InviteRefereeCompleted;
        
        /// <remarks/>
        public event AnswerSurveyCompletedEventHandler AnswerSurveyCompleted;
        
        /// <remarks/>
        public event AddUserCompletedEventHandler AddUserCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event UpdateUserCompletedEventHandler UpdateUserCompleted;
        
        /// <remarks/>
        public event AddAnonimUserCompletedEventHandler AddAnonimUserCompleted;
        
        /// <remarks/>
        public event DeleteAnonimUserCompletedEventHandler DeleteAnonimUserCompleted;
        
        /// <remarks/>
        public event UpdateAnonimUserCompletedEventHandler UpdateAnonimUserCompleted;
        
        /// <remarks/>
        public event ActivateUserCompletedEventHandler ActivateUserCompleted;
        
        /// <remarks/>
        public event DeactivateUserCompletedEventHandler DeactivateUserCompleted;
        
        /// <remarks/>
        public event AddCommentCompletedEventHandler AddCommentCompleted;
        
        /// <remarks/>
        public event DeleteCommentCompletedEventHandler DeleteCommentCompleted;
        
        /// <remarks/>
        public event UpdateCommentCompletedEventHandler UpdateCommentCompleted;
        
        /// <remarks/>
        public event ApproveCommentCompletedEventHandler ApproveCommentCompleted;
        
        /// <remarks/>
        public event AddPaperToMagazineCompletedEventHandler AddPaperToMagazineCompleted;
        
        /// <remarks/>
        public event PublishMagazineCompletedEventHandler PublishMagazineCompleted;
        
        /// <remarks/>
        public event CreatePublishedPaperIDCompletedEventHandler CreatePublishedPaperIDCompleted;
        
        /// <remarks/>
        public event AddSurveyCompletedEventHandler AddSurveyCompleted;
        
        /// <remarks/>
        public event DeleteSurveyCompletedEventHandler DeleteSurveyCompleted;
        
        /// <remarks/>
        public event UpdateSurveyCompletedEventHandler UpdateSurveyCompleted;
        
        /// <remarks/>
        public event AddSurveyQuestionaryCompletedEventHandler AddSurveyQuestionaryCompleted;
        
        /// <remarks/>
        public event DeleteSurveyQuestionaryCompletedEventHandler DeleteSurveyQuestionaryCompleted;
        
        /// <remarks/>
        public event UpdateSurveyQuestionaryCompletedEventHandler UpdateSurveyQuestionaryCompleted;
        
        /// <remarks/>
        public event AddPublishedMagazineCompletedEventHandler AddPublishedMagazineCompleted;
        
        /// <remarks/>
        public event DeletePublishedMagazineCompletedEventHandler DeletePublishedMagazineCompleted;
        
        /// <remarks/>
        public event UpdatePublishedMagazineCompletedEventHandler UpdatePublishedMagazineCompleted;
        
        /// <remarks/>
        public event AddPaperByAuthorCompletedEventHandler AddPaperByAuthorCompleted;
        
        /// <remarks/>
        public event GetUserTypesCompletedEventHandler GetUserTypesCompleted;
        
        /// <remarks/>
        public event GetAuthorListCompletedEventHandler GetAuthorListCompleted;
        
        /// <remarks/>
        public event GetUserListCompletedEventHandler GetUserListCompleted;
        
        /// <remarks/>
        public event GetSystemAdminListCompletedEventHandler GetSystemAdminListCompleted;
        
        /// <remarks/>
        public event GetRefereeListCompletedEventHandler GetRefereeListCompleted;
        
        /// <remarks/>
        public event GetModeratorListCompletedEventHandler GetModeratorListCompleted;
        
        /// <remarks/>
        public event GetMagazineListCompletedEventHandler GetMagazineListCompleted;
        
        /// <remarks/>
        public event GetPublisheMagazineListCompletedEventHandler GetPublisheMagazineListCompleted;
        
        /// <remarks/>
        public event GetCommentListCompletedEventHandler GetCommentListCompleted;
        
        /// <remarks/>
        public event GetPaperListCompletedEventHandler GetPaperListCompleted;
        
        /// <remarks/>
        public event GetScienceCategoryListCompletedEventHandler GetScienceCategoryListCompleted;
        
        /// <remarks/>
        public event GetSubCategoryListCompletedEventHandler GetSubCategoryListCompleted;
        
        /// <remarks/>
        public event GetSSurveyQuestionaryListCompletedEventHandler GetSSurveyQuestionaryListCompleted;
        
        /// <remarks/>
        public event AddSurveyAnswerCompletedEventHandler AddSurveyAnswerCompleted;
        
        /// <remarks/>
        public event DeleteSurveyAnswerCompletedEventHandler DeleteSurveyAnswerCompleted;
        
        /// <remarks/>
        public event AddSubCategoryToScienceCategoryCompletedEventHandler AddSubCategoryToScienceCategoryCompleted;
        
        /// <remarks/>
        public event AddSubCategoryToMagazineCompletedEventHandler AddSubCategoryToMagazineCompleted;
        
        /// <remarks/>
        public event GetPublisherListCompletedEventHandler GetPublisherListCompleted;
        
        /// <remarks/>
        public event GetSurveyCompletedEventHandler GetSurveyCompleted;
        
        /// <remarks/>
        public event GetRefereeNotesOnPaperCompletedEventHandler GetRefereeNotesOnPaperCompleted;
        
        /// <remarks/>
        public event GetReferenceListCompletedEventHandler GetReferenceListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public User GetUserByID(int userID) {
            object[] results = this.Invoke("GetUserByID", new object[] {
                        userID});
            return ((User)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserByIDAsync(int userID) {
            this.GetUserByIDAsync(userID, null);
        }
        
        /// <remarks/>
        public void GetUserByIDAsync(int userID, object userState) {
            if ((this.GetUserByIDOperationCompleted == null)) {
                this.GetUserByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserByIDOperationCompleted);
            }
            this.InvokeAsync("GetUserByID", new object[] {
                        userID}, this.GetUserByIDOperationCompleted, userState);
        }
        
        private void OnGetUserByIDOperationCompleted(object arg) {
            if ((this.GetUserByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserByIDCompleted(this, new GetUserByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUserPass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public User CheckUserPass(string userName, string Password) {
            object[] results = this.Invoke("CheckUserPass", new object[] {
                        userName,
                        Password});
            return ((User)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUserPassAsync(string userName, string Password) {
            this.CheckUserPassAsync(userName, Password, null);
        }
        
        /// <remarks/>
        public void CheckUserPassAsync(string userName, string Password, object userState) {
            if ((this.CheckUserPassOperationCompleted == null)) {
                this.CheckUserPassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserPassOperationCompleted);
            }
            this.InvokeAsync("CheckUserPass", new object[] {
                        userName,
                        Password}, this.CheckUserPassOperationCompleted, userState);
        }
        
        private void OnCheckUserPassOperationCompleted(object arg) {
            if ((this.CheckUserPassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserPassCompleted(this, new CheckUserPassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddMagazine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddMagazine(Magazine m) {
            object[] results = this.Invoke("AddMagazine", new object[] {
                        m});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddMagazineAsync(Magazine m) {
            this.AddMagazineAsync(m, null);
        }
        
        /// <remarks/>
        public void AddMagazineAsync(Magazine m, object userState) {
            if ((this.AddMagazineOperationCompleted == null)) {
                this.AddMagazineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMagazineOperationCompleted);
            }
            this.InvokeAsync("AddMagazine", new object[] {
                        m}, this.AddMagazineOperationCompleted, userState);
        }
        
        private void OnAddMagazineOperationCompleted(object arg) {
            if ((this.AddMagazineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMagazineCompleted(this, new AddMagazineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteMagazine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMagazine(int magazineID) {
            this.Invoke("DeleteMagazine", new object[] {
                        magazineID});
        }
        
        /// <remarks/>
        public void DeleteMagazineAsync(int magazineID) {
            this.DeleteMagazineAsync(magazineID, null);
        }
        
        /// <remarks/>
        public void DeleteMagazineAsync(int magazineID, object userState) {
            if ((this.DeleteMagazineOperationCompleted == null)) {
                this.DeleteMagazineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMagazineOperationCompleted);
            }
            this.InvokeAsync("DeleteMagazine", new object[] {
                        magazineID}, this.DeleteMagazineOperationCompleted, userState);
        }
        
        private void OnDeleteMagazineOperationCompleted(object arg) {
            if ((this.DeleteMagazineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMagazineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMagazine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMagazine(Magazine m) {
            this.Invoke("UpdateMagazine", new object[] {
                        m});
        }
        
        /// <remarks/>
        public void UpdateMagazineAsync(Magazine m) {
            this.UpdateMagazineAsync(m, null);
        }
        
        /// <remarks/>
        public void UpdateMagazineAsync(Magazine m, object userState) {
            if ((this.UpdateMagazineOperationCompleted == null)) {
                this.UpdateMagazineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMagazineOperationCompleted);
            }
            this.InvokeAsync("UpdateMagazine", new object[] {
                        m}, this.UpdateMagazineOperationCompleted, userState);
        }
        
        private void OnUpdateMagazineOperationCompleted(object arg) {
            if ((this.UpdateMagazineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMagazineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSubCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddSubCategory(SubCategory s) {
            object[] results = this.Invoke("AddSubCategory", new object[] {
                        s});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubCategoryAsync(SubCategory s) {
            this.AddSubCategoryAsync(s, null);
        }
        
        /// <remarks/>
        public void AddSubCategoryAsync(SubCategory s, object userState) {
            if ((this.AddSubCategoryOperationCompleted == null)) {
                this.AddSubCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubCategoryOperationCompleted);
            }
            this.InvokeAsync("AddSubCategory", new object[] {
                        s}, this.AddSubCategoryOperationCompleted, userState);
        }
        
        private void OnAddSubCategoryOperationCompleted(object arg) {
            if ((this.AddSubCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubCategoryCompleted(this, new AddSubCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSubCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSubCategory(int SubCategoryID) {
            this.Invoke("DeleteSubCategory", new object[] {
                        SubCategoryID});
        }
        
        /// <remarks/>
        public void DeleteSubCategoryAsync(int SubCategoryID) {
            this.DeleteSubCategoryAsync(SubCategoryID, null);
        }
        
        /// <remarks/>
        public void DeleteSubCategoryAsync(int SubCategoryID, object userState) {
            if ((this.DeleteSubCategoryOperationCompleted == null)) {
                this.DeleteSubCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSubCategoryOperationCompleted);
            }
            this.InvokeAsync("DeleteSubCategory", new object[] {
                        SubCategoryID}, this.DeleteSubCategoryOperationCompleted, userState);
        }
        
        private void OnDeleteSubCategoryOperationCompleted(object arg) {
            if ((this.DeleteSubCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSubCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSubCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSubCategory(SubCategory ss) {
            this.Invoke("UpdateSubCategory", new object[] {
                        ss});
        }
        
        /// <remarks/>
        public void UpdateSubCategoryAsync(SubCategory ss) {
            this.UpdateSubCategoryAsync(ss, null);
        }
        
        /// <remarks/>
        public void UpdateSubCategoryAsync(SubCategory ss, object userState) {
            if ((this.UpdateSubCategoryOperationCompleted == null)) {
                this.UpdateSubCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSubCategoryOperationCompleted);
            }
            this.InvokeAsync("UpdateSubCategory", new object[] {
                        ss}, this.UpdateSubCategoryOperationCompleted, userState);
        }
        
        private void OnUpdateSubCategoryOperationCompleted(object arg) {
            if ((this.UpdateSubCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSubCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddReferee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddReferee(Referee r) {
            object[] results = this.Invoke("AddReferee", new object[] {
                        r});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddRefereeAsync(Referee r) {
            this.AddRefereeAsync(r, null);
        }
        
        /// <remarks/>
        public void AddRefereeAsync(Referee r, object userState) {
            if ((this.AddRefereeOperationCompleted == null)) {
                this.AddRefereeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRefereeOperationCompleted);
            }
            this.InvokeAsync("AddReferee", new object[] {
                        r}, this.AddRefereeOperationCompleted, userState);
        }
        
        private void OnAddRefereeOperationCompleted(object arg) {
            if ((this.AddRefereeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRefereeCompleted(this, new AddRefereeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteReferee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteReferee(int RefereeID) {
            this.Invoke("DeleteReferee", new object[] {
                        RefereeID});
        }
        
        /// <remarks/>
        public void DeleteRefereeAsync(int RefereeID) {
            this.DeleteRefereeAsync(RefereeID, null);
        }
        
        /// <remarks/>
        public void DeleteRefereeAsync(int RefereeID, object userState) {
            if ((this.DeleteRefereeOperationCompleted == null)) {
                this.DeleteRefereeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRefereeOperationCompleted);
            }
            this.InvokeAsync("DeleteReferee", new object[] {
                        RefereeID}, this.DeleteRefereeOperationCompleted, userState);
        }
        
        private void OnDeleteRefereeOperationCompleted(object arg) {
            if ((this.DeleteRefereeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRefereeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateReferee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateReferee(Referee r) {
            this.Invoke("UpdateReferee", new object[] {
                        r});
        }
        
        /// <remarks/>
        public void UpdateRefereeAsync(Referee r) {
            this.UpdateRefereeAsync(r, null);
        }
        
        /// <remarks/>
        public void UpdateRefereeAsync(Referee r, object userState) {
            if ((this.UpdateRefereeOperationCompleted == null)) {
                this.UpdateRefereeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRefereeOperationCompleted);
            }
            this.InvokeAsync("UpdateReferee", new object[] {
                        r}, this.UpdateRefereeOperationCompleted, userState);
        }
        
        private void OnUpdateRefereeOperationCompleted(object arg) {
            if ((this.UpdateRefereeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRefereeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAuthor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddAuthor(Author a) {
            object[] results = this.Invoke("AddAuthor", new object[] {
                        a});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddAuthorAsync(Author a) {
            this.AddAuthorAsync(a, null);
        }
        
        /// <remarks/>
        public void AddAuthorAsync(Author a, object userState) {
            if ((this.AddAuthorOperationCompleted == null)) {
                this.AddAuthorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAuthorOperationCompleted);
            }
            this.InvokeAsync("AddAuthor", new object[] {
                        a}, this.AddAuthorOperationCompleted, userState);
        }
        
        private void OnAddAuthorOperationCompleted(object arg) {
            if ((this.AddAuthorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAuthorCompleted(this, new AddAuthorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAuthor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAuthor(int AuthorID) {
            this.Invoke("DeleteAuthor", new object[] {
                        AuthorID});
        }
        
        /// <remarks/>
        public void DeleteAuthorAsync(int AuthorID) {
            this.DeleteAuthorAsync(AuthorID, null);
        }
        
        /// <remarks/>
        public void DeleteAuthorAsync(int AuthorID, object userState) {
            if ((this.DeleteAuthorOperationCompleted == null)) {
                this.DeleteAuthorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAuthorOperationCompleted);
            }
            this.InvokeAsync("DeleteAuthor", new object[] {
                        AuthorID}, this.DeleteAuthorOperationCompleted, userState);
        }
        
        private void OnDeleteAuthorOperationCompleted(object arg) {
            if ((this.DeleteAuthorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAuthorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAuthor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAuthor(Author a) {
            this.Invoke("UpdateAuthor", new object[] {
                        a});
        }
        
        /// <remarks/>
        public void UpdateAuthorAsync(Author a) {
            this.UpdateAuthorAsync(a, null);
        }
        
        /// <remarks/>
        public void UpdateAuthorAsync(Author a, object userState) {
            if ((this.UpdateAuthorOperationCompleted == null)) {
                this.UpdateAuthorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAuthorOperationCompleted);
            }
            this.InvokeAsync("UpdateAuthor", new object[] {
                        a}, this.UpdateAuthorOperationCompleted, userState);
        }
        
        private void OnUpdateAuthorOperationCompleted(object arg) {
            if ((this.UpdateAuthorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAuthorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApproveSubCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ApproveSubCategory(SubCategory sc) {
            this.Invoke("ApproveSubCategory", new object[] {
                        sc});
        }
        
        /// <remarks/>
        public void ApproveSubCategoryAsync(SubCategory sc) {
            this.ApproveSubCategoryAsync(sc, null);
        }
        
        /// <remarks/>
        public void ApproveSubCategoryAsync(SubCategory sc, object userState) {
            if ((this.ApproveSubCategoryOperationCompleted == null)) {
                this.ApproveSubCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveSubCategoryOperationCompleted);
            }
            this.InvokeAsync("ApproveSubCategory", new object[] {
                        sc}, this.ApproveSubCategoryOperationCompleted, userState);
        }
        
        private void OnApproveSubCategoryOperationCompleted(object arg) {
            if ((this.ApproveSubCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveSubCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddScienceCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddScienceCategory(ScienceCategory sc) {
            object[] results = this.Invoke("AddScienceCategory", new object[] {
                        sc});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddScienceCategoryAsync(ScienceCategory sc) {
            this.AddScienceCategoryAsync(sc, null);
        }
        
        /// <remarks/>
        public void AddScienceCategoryAsync(ScienceCategory sc, object userState) {
            if ((this.AddScienceCategoryOperationCompleted == null)) {
                this.AddScienceCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddScienceCategoryOperationCompleted);
            }
            this.InvokeAsync("AddScienceCategory", new object[] {
                        sc}, this.AddScienceCategoryOperationCompleted, userState);
        }
        
        private void OnAddScienceCategoryOperationCompleted(object arg) {
            if ((this.AddScienceCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddScienceCategoryCompleted(this, new AddScienceCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSubCategorytoPaper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddSubCategorytoPaper(int sId, int PaperId) {
            object[] results = this.Invoke("AddSubCategorytoPaper", new object[] {
                        sId,
                        PaperId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubCategorytoPaperAsync(int sId, int PaperId) {
            this.AddSubCategorytoPaperAsync(sId, PaperId, null);
        }
        
        /// <remarks/>
        public void AddSubCategorytoPaperAsync(int sId, int PaperId, object userState) {
            if ((this.AddSubCategorytoPaperOperationCompleted == null)) {
                this.AddSubCategorytoPaperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubCategorytoPaperOperationCompleted);
            }
            this.InvokeAsync("AddSubCategorytoPaper", new object[] {
                        sId,
                        PaperId}, this.AddSubCategorytoPaperOperationCompleted, userState);
        }
        
        private void OnAddSubCategorytoPaperOperationCompleted(object arg) {
            if ((this.AddSubCategorytoPaperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubCategorytoPaperCompleted(this, new AddSubCategorytoPaperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddReferencetoPaper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddReferencetoPaper(int rId, int PaperId) {
            object[] results = this.Invoke("AddReferencetoPaper", new object[] {
                        rId,
                        PaperId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddReferencetoPaperAsync(int rId, int PaperId) {
            this.AddReferencetoPaperAsync(rId, PaperId, null);
        }
        
        /// <remarks/>
        public void AddReferencetoPaperAsync(int rId, int PaperId, object userState) {
            if ((this.AddReferencetoPaperOperationCompleted == null)) {
                this.AddReferencetoPaperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddReferencetoPaperOperationCompleted);
            }
            this.InvokeAsync("AddReferencetoPaper", new object[] {
                        rId,
                        PaperId}, this.AddReferencetoPaperOperationCompleted, userState);
        }
        
        private void OnAddReferencetoPaperOperationCompleted(object arg) {
            if ((this.AddReferencetoPaperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddReferencetoPaperCompleted(this, new AddReferencetoPaperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteScienceCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteScienceCategory(int ScienceCategoryID) {
            this.Invoke("DeleteScienceCategory", new object[] {
                        ScienceCategoryID});
        }
        
        /// <remarks/>
        public void DeleteScienceCategoryAsync(int ScienceCategoryID) {
            this.DeleteScienceCategoryAsync(ScienceCategoryID, null);
        }
        
        /// <remarks/>
        public void DeleteScienceCategoryAsync(int ScienceCategoryID, object userState) {
            if ((this.DeleteScienceCategoryOperationCompleted == null)) {
                this.DeleteScienceCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteScienceCategoryOperationCompleted);
            }
            this.InvokeAsync("DeleteScienceCategory", new object[] {
                        ScienceCategoryID}, this.DeleteScienceCategoryOperationCompleted, userState);
        }
        
        private void OnDeleteScienceCategoryOperationCompleted(object arg) {
            if ((this.DeleteScienceCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteScienceCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateScienceCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateScienceCategory(ScienceCategory sc) {
            this.Invoke("UpdateScienceCategory", new object[] {
                        sc});
        }
        
        /// <remarks/>
        public void UpdateScienceCategoryAsync(ScienceCategory sc) {
            this.UpdateScienceCategoryAsync(sc, null);
        }
        
        /// <remarks/>
        public void UpdateScienceCategoryAsync(ScienceCategory sc, object userState) {
            if ((this.UpdateScienceCategoryOperationCompleted == null)) {
                this.UpdateScienceCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateScienceCategoryOperationCompleted);
            }
            this.InvokeAsync("UpdateScienceCategory", new object[] {
                        sc}, this.UpdateScienceCategoryOperationCompleted, userState);
        }
        
        private void OnUpdateScienceCategoryOperationCompleted(object arg) {
            if ((this.UpdateScienceCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateScienceCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPublisher", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddPublisher(Publisher pp) {
            object[] results = this.Invoke("AddPublisher", new object[] {
                        pp});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddPublisherAsync(Publisher pp) {
            this.AddPublisherAsync(pp, null);
        }
        
        /// <remarks/>
        public void AddPublisherAsync(Publisher pp, object userState) {
            if ((this.AddPublisherOperationCompleted == null)) {
                this.AddPublisherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPublisherOperationCompleted);
            }
            this.InvokeAsync("AddPublisher", new object[] {
                        pp}, this.AddPublisherOperationCompleted, userState);
        }
        
        private void OnAddPublisherOperationCompleted(object arg) {
            if ((this.AddPublisherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPublisherCompleted(this, new AddPublisherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePublisher", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePublisher(int PublisherID) {
            this.Invoke("DeletePublisher", new object[] {
                        PublisherID});
        }
        
        /// <remarks/>
        public void DeletePublisherAsync(int PublisherID) {
            this.DeletePublisherAsync(PublisherID, null);
        }
        
        /// <remarks/>
        public void DeletePublisherAsync(int PublisherID, object userState) {
            if ((this.DeletePublisherOperationCompleted == null)) {
                this.DeletePublisherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePublisherOperationCompleted);
            }
            this.InvokeAsync("DeletePublisher", new object[] {
                        PublisherID}, this.DeletePublisherOperationCompleted, userState);
        }
        
        private void OnDeletePublisherOperationCompleted(object arg) {
            if ((this.DeletePublisherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePublisherCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePublisher", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePublisher(Publisher pp) {
            this.Invoke("UpdatePublisher", new object[] {
                        pp});
        }
        
        /// <remarks/>
        public void UpdatePublisherAsync(Publisher pp) {
            this.UpdatePublisherAsync(pp, null);
        }
        
        /// <remarks/>
        public void UpdatePublisherAsync(Publisher pp, object userState) {
            if ((this.UpdatePublisherOperationCompleted == null)) {
                this.UpdatePublisherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePublisherOperationCompleted);
            }
            this.InvokeAsync("UpdatePublisher", new object[] {
                        pp}, this.UpdatePublisherOperationCompleted, userState);
        }
        
        private void OnUpdatePublisherOperationCompleted(object arg) {
            if ((this.UpdatePublisherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePublisherCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddModerator", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddModerator(Moderator pp) {
            object[] results = this.Invoke("AddModerator", new object[] {
                        pp});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddModeratorAsync(Moderator pp) {
            this.AddModeratorAsync(pp, null);
        }
        
        /// <remarks/>
        public void AddModeratorAsync(Moderator pp, object userState) {
            if ((this.AddModeratorOperationCompleted == null)) {
                this.AddModeratorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddModeratorOperationCompleted);
            }
            this.InvokeAsync("AddModerator", new object[] {
                        pp}, this.AddModeratorOperationCompleted, userState);
        }
        
        private void OnAddModeratorOperationCompleted(object arg) {
            if ((this.AddModeratorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddModeratorCompleted(this, new AddModeratorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteModerator", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteModerator(int ModeratorID) {
            this.Invoke("DeleteModerator", new object[] {
                        ModeratorID});
        }
        
        /// <remarks/>
        public void DeleteModeratorAsync(int ModeratorID) {
            this.DeleteModeratorAsync(ModeratorID, null);
        }
        
        /// <remarks/>
        public void DeleteModeratorAsync(int ModeratorID, object userState) {
            if ((this.DeleteModeratorOperationCompleted == null)) {
                this.DeleteModeratorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteModeratorOperationCompleted);
            }
            this.InvokeAsync("DeleteModerator", new object[] {
                        ModeratorID}, this.DeleteModeratorOperationCompleted, userState);
        }
        
        private void OnDeleteModeratorOperationCompleted(object arg) {
            if ((this.DeleteModeratorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteModeratorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateModerator", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateModerator(Moderator pp) {
            this.Invoke("UpdateModerator", new object[] {
                        pp});
        }
        
        /// <remarks/>
        public void UpdateModeratorAsync(Moderator pp) {
            this.UpdateModeratorAsync(pp, null);
        }
        
        /// <remarks/>
        public void UpdateModeratorAsync(Moderator pp, object userState) {
            if ((this.UpdateModeratorOperationCompleted == null)) {
                this.UpdateModeratorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateModeratorOperationCompleted);
            }
            this.InvokeAsync("UpdateModerator", new object[] {
                        pp}, this.UpdateModeratorOperationCompleted, userState);
        }
        
        private void OnUpdateModeratorOperationCompleted(object arg) {
            if ((this.UpdateModeratorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateModeratorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPaper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddPaper(Paper p) {
            object[] results = this.Invoke("AddPaper", new object[] {
                        p});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddPaperAsync(Paper p) {
            this.AddPaperAsync(p, null);
        }
        
        /// <remarks/>
        public void AddPaperAsync(Paper p, object userState) {
            if ((this.AddPaperOperationCompleted == null)) {
                this.AddPaperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPaperOperationCompleted);
            }
            this.InvokeAsync("AddPaper", new object[] {
                        p}, this.AddPaperOperationCompleted, userState);
        }
        
        private void OnAddPaperOperationCompleted(object arg) {
            if ((this.AddPaperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPaperCompleted(this, new AddPaperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePaper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePaper(int PaperID) {
            this.Invoke("DeletePaper", new object[] {
                        PaperID});
        }
        
        /// <remarks/>
        public void DeletePaperAsync(int PaperID) {
            this.DeletePaperAsync(PaperID, null);
        }
        
        /// <remarks/>
        public void DeletePaperAsync(int PaperID, object userState) {
            if ((this.DeletePaperOperationCompleted == null)) {
                this.DeletePaperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePaperOperationCompleted);
            }
            this.InvokeAsync("DeletePaper", new object[] {
                        PaperID}, this.DeletePaperOperationCompleted, userState);
        }
        
        private void OnDeletePaperOperationCompleted(object arg) {
            if ((this.DeletePaperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePaperCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePaper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePaper(Paper pp) {
            this.Invoke("UpdatePaper", new object[] {
                        pp});
        }
        
        /// <remarks/>
        public void UpdatePaperAsync(Paper pp) {
            this.UpdatePaperAsync(pp, null);
        }
        
        /// <remarks/>
        public void UpdatePaperAsync(Paper pp, object userState) {
            if ((this.UpdatePaperOperationCompleted == null)) {
                this.UpdatePaperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePaperOperationCompleted);
            }
            this.InvokeAsync("UpdatePaper", new object[] {
                        pp}, this.UpdatePaperOperationCompleted, userState);
        }
        
        private void OnUpdatePaperOperationCompleted(object arg) {
            if ((this.UpdatePaperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePaperCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BackUpDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BackUpDB() {
            this.Invoke("BackUpDB", new object[0]);
        }
        
        /// <remarks/>
        public void BackUpDBAsync() {
            this.BackUpDBAsync(null);
        }
        
        /// <remarks/>
        public void BackUpDBAsync(object userState) {
            if ((this.BackUpDBOperationCompleted == null)) {
                this.BackUpDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackUpDBOperationCompleted);
            }
            this.InvokeAsync("BackUpDB", new object[0], this.BackUpDBOperationCompleted, userState);
        }
        
        private void OnBackUpDBOperationCompleted(object arg) {
            if ((this.BackUpDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackUpDBCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExaminePaper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExaminePaper(Paper p, Comment[] commentlist, int RefereeID, Survey[] surveyList) {
            this.Invoke("ExaminePaper", new object[] {
                        p,
                        commentlist,
                        RefereeID,
                        surveyList});
        }
        
        /// <remarks/>
        public void ExaminePaperAsync(Paper p, Comment[] commentlist, int RefereeID, Survey[] surveyList) {
            this.ExaminePaperAsync(p, commentlist, RefereeID, surveyList, null);
        }
        
        /// <remarks/>
        public void ExaminePaperAsync(Paper p, Comment[] commentlist, int RefereeID, Survey[] surveyList, object userState) {
            if ((this.ExaminePaperOperationCompleted == null)) {
                this.ExaminePaperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExaminePaperOperationCompleted);
            }
            this.InvokeAsync("ExaminePaper", new object[] {
                        p,
                        commentlist,
                        RefereeID,
                        surveyList}, this.ExaminePaperOperationCompleted, userState);
        }
        
        private void OnExaminePaperOperationCompleted(object arg) {
            if ((this.ExaminePaperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExaminePaperCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendOpinionToPublisher", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendOpinionToPublisher(int PaperID, int RefereeID, int PublisherID) {
            this.Invoke("SendOpinionToPublisher", new object[] {
                        PaperID,
                        RefereeID,
                        PublisherID});
        }
        
        /// <remarks/>
        public void SendOpinionToPublisherAsync(int PaperID, int RefereeID, int PublisherID) {
            this.SendOpinionToPublisherAsync(PaperID, RefereeID, PublisherID, null);
        }
        
        /// <remarks/>
        public void SendOpinionToPublisherAsync(int PaperID, int RefereeID, int PublisherID, object userState) {
            if ((this.SendOpinionToPublisherOperationCompleted == null)) {
                this.SendOpinionToPublisherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOpinionToPublisherOperationCompleted);
            }
            this.InvokeAsync("SendOpinionToPublisher", new object[] {
                        PaperID,
                        RefereeID,
                        PublisherID}, this.SendOpinionToPublisherOperationCompleted, userState);
        }
        
        private void OnSendOpinionToPublisherOperationCompleted(object arg) {
            if ((this.SendOpinionToPublisherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOpinionToPublisherCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendPaperToReferee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendPaperToReferee(int PaperID, int RefereeID, int PublisherID) {
            this.Invoke("SendPaperToReferee", new object[] {
                        PaperID,
                        RefereeID,
                        PublisherID});
        }
        
        /// <remarks/>
        public void SendPaperToRefereeAsync(int PaperID, int RefereeID, int PublisherID) {
            this.SendPaperToRefereeAsync(PaperID, RefereeID, PublisherID, null);
        }
        
        /// <remarks/>
        public void SendPaperToRefereeAsync(int PaperID, int RefereeID, int PublisherID, object userState) {
            if ((this.SendPaperToRefereeOperationCompleted == null)) {
                this.SendPaperToRefereeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPaperToRefereeOperationCompleted);
            }
            this.InvokeAsync("SendPaperToReferee", new object[] {
                        PaperID,
                        RefereeID,
                        PublisherID}, this.SendPaperToRefereeOperationCompleted, userState);
        }
        
        private void OnSendPaperToRefereeOperationCompleted(object arg) {
            if ((this.SendPaperToRefereeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPaperToRefereeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendPaperBackToWriter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendPaperBackToWriter(int PaperID, int AuthorID, int PublisherID) {
            this.Invoke("SendPaperBackToWriter", new object[] {
                        PaperID,
                        AuthorID,
                        PublisherID});
        }
        
        /// <remarks/>
        public void SendPaperBackToWriterAsync(int PaperID, int AuthorID, int PublisherID) {
            this.SendPaperBackToWriterAsync(PaperID, AuthorID, PublisherID, null);
        }
        
        /// <remarks/>
        public void SendPaperBackToWriterAsync(int PaperID, int AuthorID, int PublisherID, object userState) {
            if ((this.SendPaperBackToWriterOperationCompleted == null)) {
                this.SendPaperBackToWriterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPaperBackToWriterOperationCompleted);
            }
            this.InvokeAsync("SendPaperBackToWriter", new object[] {
                        PaperID,
                        AuthorID,
                        PublisherID}, this.SendPaperBackToWriterOperationCompleted, userState);
        }
        
        private void OnSendPaperBackToWriterOperationCompleted(object arg) {
            if ((this.SendPaperBackToWriterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPaperBackToWriterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InviteReferee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InviteReferee(Referee passiveRefereeRecord, int PublisherID) {
            this.Invoke("InviteReferee", new object[] {
                        passiveRefereeRecord,
                        PublisherID});
        }
        
        /// <remarks/>
        public void InviteRefereeAsync(Referee passiveRefereeRecord, int PublisherID) {
            this.InviteRefereeAsync(passiveRefereeRecord, PublisherID, null);
        }
        
        /// <remarks/>
        public void InviteRefereeAsync(Referee passiveRefereeRecord, int PublisherID, object userState) {
            if ((this.InviteRefereeOperationCompleted == null)) {
                this.InviteRefereeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInviteRefereeOperationCompleted);
            }
            this.InvokeAsync("InviteReferee", new object[] {
                        passiveRefereeRecord,
                        PublisherID}, this.InviteRefereeOperationCompleted, userState);
        }
        
        private void OnInviteRefereeOperationCompleted(object arg) {
            if ((this.InviteRefereeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InviteRefereeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AnswerSurvey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AnswerSurvey(SurveyAnswer[] sAnswers) {
            this.Invoke("AnswerSurvey", new object[] {
                        sAnswers});
        }
        
        /// <remarks/>
        public void AnswerSurveyAsync(SurveyAnswer[] sAnswers) {
            this.AnswerSurveyAsync(sAnswers, null);
        }
        
        /// <remarks/>
        public void AnswerSurveyAsync(SurveyAnswer[] sAnswers, object userState) {
            if ((this.AnswerSurveyOperationCompleted == null)) {
                this.AnswerSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnswerSurveyOperationCompleted);
            }
            this.InvokeAsync("AnswerSurvey", new object[] {
                        sAnswers}, this.AnswerSurveyOperationCompleted, userState);
        }
        
        private void OnAnswerSurveyOperationCompleted(object arg) {
            if ((this.AnswerSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnswerSurveyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddUser(User u) {
            object[] results = this.Invoke("AddUser", new object[] {
                        u});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddUserAsync(User u) {
            this.AddUserAsync(u, null);
        }
        
        /// <remarks/>
        public void AddUserAsync(User u, object userState) {
            if ((this.AddUserOperationCompleted == null)) {
                this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
            }
            this.InvokeAsync("AddUser", new object[] {
                        u}, this.AddUserOperationCompleted, userState);
        }
        
        private void OnAddUserOperationCompleted(object arg) {
            if ((this.AddUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUser(int UserID) {
            this.Invoke("DeleteUser", new object[] {
                        UserID});
        }
        
        /// <remarks/>
        public void DeleteUserAsync(int UserID) {
            this.DeleteUserAsync(UserID, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(int UserID, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        UserID}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateUser(User u) {
            this.Invoke("UpdateUser", new object[] {
                        u});
        }
        
        /// <remarks/>
        public void UpdateUserAsync(User u) {
            this.UpdateUserAsync(u, null);
        }
        
        /// <remarks/>
        public void UpdateUserAsync(User u, object userState) {
            if ((this.UpdateUserOperationCompleted == null)) {
                this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
            }
            this.InvokeAsync("UpdateUser", new object[] {
                        u}, this.UpdateUserOperationCompleted, userState);
        }
        
        private void OnUpdateUserOperationCompleted(object arg) {
            if ((this.UpdateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAnonimUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddAnonimUser(AnonimUser u) {
            object[] results = this.Invoke("AddAnonimUser", new object[] {
                        u});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddAnonimUserAsync(AnonimUser u) {
            this.AddAnonimUserAsync(u, null);
        }
        
        /// <remarks/>
        public void AddAnonimUserAsync(AnonimUser u, object userState) {
            if ((this.AddAnonimUserOperationCompleted == null)) {
                this.AddAnonimUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAnonimUserOperationCompleted);
            }
            this.InvokeAsync("AddAnonimUser", new object[] {
                        u}, this.AddAnonimUserOperationCompleted, userState);
        }
        
        private void OnAddAnonimUserOperationCompleted(object arg) {
            if ((this.AddAnonimUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAnonimUserCompleted(this, new AddAnonimUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAnonimUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAnonimUser(int AnonimUserID) {
            this.Invoke("DeleteAnonimUser", new object[] {
                        AnonimUserID});
        }
        
        /// <remarks/>
        public void DeleteAnonimUserAsync(int AnonimUserID) {
            this.DeleteAnonimUserAsync(AnonimUserID, null);
        }
        
        /// <remarks/>
        public void DeleteAnonimUserAsync(int AnonimUserID, object userState) {
            if ((this.DeleteAnonimUserOperationCompleted == null)) {
                this.DeleteAnonimUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAnonimUserOperationCompleted);
            }
            this.InvokeAsync("DeleteAnonimUser", new object[] {
                        AnonimUserID}, this.DeleteAnonimUserOperationCompleted, userState);
        }
        
        private void OnDeleteAnonimUserOperationCompleted(object arg) {
            if ((this.DeleteAnonimUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAnonimUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAnonimUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAnonimUser(AnonimUser u) {
            this.Invoke("UpdateAnonimUser", new object[] {
                        u});
        }
        
        /// <remarks/>
        public void UpdateAnonimUserAsync(AnonimUser u) {
            this.UpdateAnonimUserAsync(u, null);
        }
        
        /// <remarks/>
        public void UpdateAnonimUserAsync(AnonimUser u, object userState) {
            if ((this.UpdateAnonimUserOperationCompleted == null)) {
                this.UpdateAnonimUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAnonimUserOperationCompleted);
            }
            this.InvokeAsync("UpdateAnonimUser", new object[] {
                        u}, this.UpdateAnonimUserOperationCompleted, userState);
        }
        
        private void OnUpdateAnonimUserOperationCompleted(object arg) {
            if ((this.UpdateAnonimUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAnonimUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ActivateUser(int userID) {
            this.Invoke("ActivateUser", new object[] {
                        userID});
        }
        
        /// <remarks/>
        public void ActivateUserAsync(int userID) {
            this.ActivateUserAsync(userID, null);
        }
        
        /// <remarks/>
        public void ActivateUserAsync(int userID, object userState) {
            if ((this.ActivateUserOperationCompleted == null)) {
                this.ActivateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateUserOperationCompleted);
            }
            this.InvokeAsync("ActivateUser", new object[] {
                        userID}, this.ActivateUserOperationCompleted, userState);
        }
        
        private void OnActivateUserOperationCompleted(object arg) {
            if ((this.ActivateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeactivateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeactivateUser(int userID) {
            this.Invoke("DeactivateUser", new object[] {
                        userID});
        }
        
        /// <remarks/>
        public void DeactivateUserAsync(int userID) {
            this.DeactivateUserAsync(userID, null);
        }
        
        /// <remarks/>
        public void DeactivateUserAsync(int userID, object userState) {
            if ((this.DeactivateUserOperationCompleted == null)) {
                this.DeactivateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateUserOperationCompleted);
            }
            this.InvokeAsync("DeactivateUser", new object[] {
                        userID}, this.DeactivateUserOperationCompleted, userState);
        }
        
        private void OnDeactivateUserOperationCompleted(object arg) {
            if ((this.DeactivateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddComment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddComment(Comment c, int paperID) {
            object[] results = this.Invoke("AddComment", new object[] {
                        c,
                        paperID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCommentAsync(Comment c, int paperID) {
            this.AddCommentAsync(c, paperID, null);
        }
        
        /// <remarks/>
        public void AddCommentAsync(Comment c, int paperID, object userState) {
            if ((this.AddCommentOperationCompleted == null)) {
                this.AddCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCommentOperationCompleted);
            }
            this.InvokeAsync("AddComment", new object[] {
                        c,
                        paperID}, this.AddCommentOperationCompleted, userState);
        }
        
        private void OnAddCommentOperationCompleted(object arg) {
            if ((this.AddCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCommentCompleted(this, new AddCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteComment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteComment(int CommentID) {
            this.Invoke("DeleteComment", new object[] {
                        CommentID});
        }
        
        /// <remarks/>
        public void DeleteCommentAsync(int CommentID) {
            this.DeleteCommentAsync(CommentID, null);
        }
        
        /// <remarks/>
        public void DeleteCommentAsync(int CommentID, object userState) {
            if ((this.DeleteCommentOperationCompleted == null)) {
                this.DeleteCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCommentOperationCompleted);
            }
            this.InvokeAsync("DeleteComment", new object[] {
                        CommentID}, this.DeleteCommentOperationCompleted, userState);
        }
        
        private void OnDeleteCommentOperationCompleted(object arg) {
            if ((this.DeleteCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateComment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateComment(Comment c) {
            this.Invoke("UpdateComment", new object[] {
                        c});
        }
        
        /// <remarks/>
        public void UpdateCommentAsync(Comment c) {
            this.UpdateCommentAsync(c, null);
        }
        
        /// <remarks/>
        public void UpdateCommentAsync(Comment c, object userState) {
            if ((this.UpdateCommentOperationCompleted == null)) {
                this.UpdateCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCommentOperationCompleted);
            }
            this.InvokeAsync("UpdateComment", new object[] {
                        c}, this.UpdateCommentOperationCompleted, userState);
        }
        
        private void OnUpdateCommentOperationCompleted(object arg) {
            if ((this.UpdateCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApproveComment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ApproveComment(int CommentID) {
            this.Invoke("ApproveComment", new object[] {
                        CommentID});
        }
        
        /// <remarks/>
        public void ApproveCommentAsync(int CommentID) {
            this.ApproveCommentAsync(CommentID, null);
        }
        
        /// <remarks/>
        public void ApproveCommentAsync(int CommentID, object userState) {
            if ((this.ApproveCommentOperationCompleted == null)) {
                this.ApproveCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveCommentOperationCompleted);
            }
            this.InvokeAsync("ApproveComment", new object[] {
                        CommentID}, this.ApproveCommentOperationCompleted, userState);
        }
        
        private void OnApproveCommentOperationCompleted(object arg) {
            if ((this.ApproveCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPaperToMagazine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddPaperToMagazine(Paper p, int MagazineID) {
            object[] results = this.Invoke("AddPaperToMagazine", new object[] {
                        p,
                        MagazineID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddPaperToMagazineAsync(Paper p, int MagazineID) {
            this.AddPaperToMagazineAsync(p, MagazineID, null);
        }
        
        /// <remarks/>
        public void AddPaperToMagazineAsync(Paper p, int MagazineID, object userState) {
            if ((this.AddPaperToMagazineOperationCompleted == null)) {
                this.AddPaperToMagazineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPaperToMagazineOperationCompleted);
            }
            this.InvokeAsync("AddPaperToMagazine", new object[] {
                        p,
                        MagazineID}, this.AddPaperToMagazineOperationCompleted, userState);
        }
        
        private void OnAddPaperToMagazineOperationCompleted(object arg) {
            if ((this.AddPaperToMagazineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPaperToMagazineCompleted(this, new AddPaperToMagazineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PublishMagazine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PublishMagazine(int MagazineID) {
            this.Invoke("PublishMagazine", new object[] {
                        MagazineID});
        }
        
        /// <remarks/>
        public void PublishMagazineAsync(int MagazineID) {
            this.PublishMagazineAsync(MagazineID, null);
        }
        
        /// <remarks/>
        public void PublishMagazineAsync(int MagazineID, object userState) {
            if ((this.PublishMagazineOperationCompleted == null)) {
                this.PublishMagazineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishMagazineOperationCompleted);
            }
            this.InvokeAsync("PublishMagazine", new object[] {
                        MagazineID}, this.PublishMagazineOperationCompleted, userState);
        }
        
        private void OnPublishMagazineOperationCompleted(object arg) {
            if ((this.PublishMagazineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishMagazineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreatePublishedPaperID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreatePublishedPaperID() {
            object[] results = this.Invoke("CreatePublishedPaperID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePublishedPaperIDAsync() {
            this.CreatePublishedPaperIDAsync(null);
        }
        
        /// <remarks/>
        public void CreatePublishedPaperIDAsync(object userState) {
            if ((this.CreatePublishedPaperIDOperationCompleted == null)) {
                this.CreatePublishedPaperIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePublishedPaperIDOperationCompleted);
            }
            this.InvokeAsync("CreatePublishedPaperID", new object[0], this.CreatePublishedPaperIDOperationCompleted, userState);
        }
        
        private void OnCreatePublishedPaperIDOperationCompleted(object arg) {
            if ((this.CreatePublishedPaperIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePublishedPaperIDCompleted(this, new CreatePublishedPaperIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSurvey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddSurvey(Survey s, int MagazineID) {
            object[] results = this.Invoke("AddSurvey", new object[] {
                        s,
                        MagazineID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddSurveyAsync(Survey s, int MagazineID) {
            this.AddSurveyAsync(s, MagazineID, null);
        }
        
        /// <remarks/>
        public void AddSurveyAsync(Survey s, int MagazineID, object userState) {
            if ((this.AddSurveyOperationCompleted == null)) {
                this.AddSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSurveyOperationCompleted);
            }
            this.InvokeAsync("AddSurvey", new object[] {
                        s,
                        MagazineID}, this.AddSurveyOperationCompleted, userState);
        }
        
        private void OnAddSurveyOperationCompleted(object arg) {
            if ((this.AddSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSurveyCompleted(this, new AddSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSurvey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSurvey(int SurveyID) {
            this.Invoke("DeleteSurvey", new object[] {
                        SurveyID});
        }
        
        /// <remarks/>
        public void DeleteSurveyAsync(int SurveyID) {
            this.DeleteSurveyAsync(SurveyID, null);
        }
        
        /// <remarks/>
        public void DeleteSurveyAsync(int SurveyID, object userState) {
            if ((this.DeleteSurveyOperationCompleted == null)) {
                this.DeleteSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSurveyOperationCompleted);
            }
            this.InvokeAsync("DeleteSurvey", new object[] {
                        SurveyID}, this.DeleteSurveyOperationCompleted, userState);
        }
        
        private void OnDeleteSurveyOperationCompleted(object arg) {
            if ((this.DeleteSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSurveyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSurvey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSurvey(Survey s) {
            this.Invoke("UpdateSurvey", new object[] {
                        s});
        }
        
        /// <remarks/>
        public void UpdateSurveyAsync(Survey s) {
            this.UpdateSurveyAsync(s, null);
        }
        
        /// <remarks/>
        public void UpdateSurveyAsync(Survey s, object userState) {
            if ((this.UpdateSurveyOperationCompleted == null)) {
                this.UpdateSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSurveyOperationCompleted);
            }
            this.InvokeAsync("UpdateSurvey", new object[] {
                        s}, this.UpdateSurveyOperationCompleted, userState);
        }
        
        private void OnUpdateSurveyOperationCompleted(object arg) {
            if ((this.UpdateSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSurveyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSurveyQuestionary", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddSurveyQuestionary(SurveyQuestionary sq, int SurveyRef) {
            object[] results = this.Invoke("AddSurveyQuestionary", new object[] {
                        sq,
                        SurveyRef});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddSurveyQuestionaryAsync(SurveyQuestionary sq, int SurveyRef) {
            this.AddSurveyQuestionaryAsync(sq, SurveyRef, null);
        }
        
        /// <remarks/>
        public void AddSurveyQuestionaryAsync(SurveyQuestionary sq, int SurveyRef, object userState) {
            if ((this.AddSurveyQuestionaryOperationCompleted == null)) {
                this.AddSurveyQuestionaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSurveyQuestionaryOperationCompleted);
            }
            this.InvokeAsync("AddSurveyQuestionary", new object[] {
                        sq,
                        SurveyRef}, this.AddSurveyQuestionaryOperationCompleted, userState);
        }
        
        private void OnAddSurveyQuestionaryOperationCompleted(object arg) {
            if ((this.AddSurveyQuestionaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSurveyQuestionaryCompleted(this, new AddSurveyQuestionaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSurveyQuestionary", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSurveyQuestionary(int SurveyQuestionaryID) {
            this.Invoke("DeleteSurveyQuestionary", new object[] {
                        SurveyQuestionaryID});
        }
        
        /// <remarks/>
        public void DeleteSurveyQuestionaryAsync(int SurveyQuestionaryID) {
            this.DeleteSurveyQuestionaryAsync(SurveyQuestionaryID, null);
        }
        
        /// <remarks/>
        public void DeleteSurveyQuestionaryAsync(int SurveyQuestionaryID, object userState) {
            if ((this.DeleteSurveyQuestionaryOperationCompleted == null)) {
                this.DeleteSurveyQuestionaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSurveyQuestionaryOperationCompleted);
            }
            this.InvokeAsync("DeleteSurveyQuestionary", new object[] {
                        SurveyQuestionaryID}, this.DeleteSurveyQuestionaryOperationCompleted, userState);
        }
        
        private void OnDeleteSurveyQuestionaryOperationCompleted(object arg) {
            if ((this.DeleteSurveyQuestionaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSurveyQuestionaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSurveyQuestionary", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSurveyQuestionary(SurveyQuestionary s) {
            this.Invoke("UpdateSurveyQuestionary", new object[] {
                        s});
        }
        
        /// <remarks/>
        public void UpdateSurveyQuestionaryAsync(SurveyQuestionary s) {
            this.UpdateSurveyQuestionaryAsync(s, null);
        }
        
        /// <remarks/>
        public void UpdateSurveyQuestionaryAsync(SurveyQuestionary s, object userState) {
            if ((this.UpdateSurveyQuestionaryOperationCompleted == null)) {
                this.UpdateSurveyQuestionaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSurveyQuestionaryOperationCompleted);
            }
            this.InvokeAsync("UpdateSurveyQuestionary", new object[] {
                        s}, this.UpdateSurveyQuestionaryOperationCompleted, userState);
        }
        
        private void OnUpdateSurveyQuestionaryOperationCompleted(object arg) {
            if ((this.UpdateSurveyQuestionaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSurveyQuestionaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPublishedMagazine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddPublishedMagazine(PublishedMagazine pm, int MagazineID) {
            object[] results = this.Invoke("AddPublishedMagazine", new object[] {
                        pm,
                        MagazineID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddPublishedMagazineAsync(PublishedMagazine pm, int MagazineID) {
            this.AddPublishedMagazineAsync(pm, MagazineID, null);
        }
        
        /// <remarks/>
        public void AddPublishedMagazineAsync(PublishedMagazine pm, int MagazineID, object userState) {
            if ((this.AddPublishedMagazineOperationCompleted == null)) {
                this.AddPublishedMagazineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPublishedMagazineOperationCompleted);
            }
            this.InvokeAsync("AddPublishedMagazine", new object[] {
                        pm,
                        MagazineID}, this.AddPublishedMagazineOperationCompleted, userState);
        }
        
        private void OnAddPublishedMagazineOperationCompleted(object arg) {
            if ((this.AddPublishedMagazineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPublishedMagazineCompleted(this, new AddPublishedMagazineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePublishedMagazine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePublishedMagazine(int PublishedMagazineID) {
            this.Invoke("DeletePublishedMagazine", new object[] {
                        PublishedMagazineID});
        }
        
        /// <remarks/>
        public void DeletePublishedMagazineAsync(int PublishedMagazineID) {
            this.DeletePublishedMagazineAsync(PublishedMagazineID, null);
        }
        
        /// <remarks/>
        public void DeletePublishedMagazineAsync(int PublishedMagazineID, object userState) {
            if ((this.DeletePublishedMagazineOperationCompleted == null)) {
                this.DeletePublishedMagazineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePublishedMagazineOperationCompleted);
            }
            this.InvokeAsync("DeletePublishedMagazine", new object[] {
                        PublishedMagazineID}, this.DeletePublishedMagazineOperationCompleted, userState);
        }
        
        private void OnDeletePublishedMagazineOperationCompleted(object arg) {
            if ((this.DeletePublishedMagazineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePublishedMagazineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePublishedMagazine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePublishedMagazine(PublishedMagazine pm) {
            this.Invoke("UpdatePublishedMagazine", new object[] {
                        pm});
        }
        
        /// <remarks/>
        public void UpdatePublishedMagazineAsync(PublishedMagazine pm) {
            this.UpdatePublishedMagazineAsync(pm, null);
        }
        
        /// <remarks/>
        public void UpdatePublishedMagazineAsync(PublishedMagazine pm, object userState) {
            if ((this.UpdatePublishedMagazineOperationCompleted == null)) {
                this.UpdatePublishedMagazineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePublishedMagazineOperationCompleted);
            }
            this.InvokeAsync("UpdatePublishedMagazine", new object[] {
                        pm}, this.UpdatePublishedMagazineOperationCompleted, userState);
        }
        
        private void OnUpdatePublishedMagazineOperationCompleted(object arg) {
            if ((this.UpdatePublishedMagazineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePublishedMagazineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPaperByAuthor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddPaperByAuthor(int userID, Paper p) {
            this.Invoke("AddPaperByAuthor", new object[] {
                        userID,
                        p});
        }
        
        /// <remarks/>
        public void AddPaperByAuthorAsync(int userID, Paper p) {
            this.AddPaperByAuthorAsync(userID, p, null);
        }
        
        /// <remarks/>
        public void AddPaperByAuthorAsync(int userID, Paper p, object userState) {
            if ((this.AddPaperByAuthorOperationCompleted == null)) {
                this.AddPaperByAuthorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPaperByAuthorOperationCompleted);
            }
            this.InvokeAsync("AddPaperByAuthor", new object[] {
                        userID,
                        p}, this.AddPaperByAuthorOperationCompleted, userState);
        }
        
        private void OnAddPaperByAuthorOperationCompleted(object arg) {
            if ((this.AddPaperByAuthorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPaperByAuthorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetUserTypes(int userID) {
            object[] results = this.Invoke("GetUserTypes", new object[] {
                        userID});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserTypesAsync(int userID) {
            this.GetUserTypesAsync(userID, null);
        }
        
        /// <remarks/>
        public void GetUserTypesAsync(int userID, object userState) {
            if ((this.GetUserTypesOperationCompleted == null)) {
                this.GetUserTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTypesOperationCompleted);
            }
            this.InvokeAsync("GetUserTypes", new object[] {
                        userID}, this.GetUserTypesOperationCompleted, userState);
        }
        
        private void OnGetUserTypesOperationCompleted(object arg) {
            if ((this.GetUserTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserTypesCompleted(this, new GetUserTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAuthorList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Author[] GetAuthorList(string AuthorIDList, string MagazineIDList, string PaperIDList, string PublishedMagazineIDList) {
            object[] results = this.Invoke("GetAuthorList", new object[] {
                        AuthorIDList,
                        MagazineIDList,
                        PaperIDList,
                        PublishedMagazineIDList});
            return ((Author[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorListAsync(string AuthorIDList, string MagazineIDList, string PaperIDList, string PublishedMagazineIDList) {
            this.GetAuthorListAsync(AuthorIDList, MagazineIDList, PaperIDList, PublishedMagazineIDList, null);
        }
        
        /// <remarks/>
        public void GetAuthorListAsync(string AuthorIDList, string MagazineIDList, string PaperIDList, string PublishedMagazineIDList, object userState) {
            if ((this.GetAuthorListOperationCompleted == null)) {
                this.GetAuthorListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorListOperationCompleted);
            }
            this.InvokeAsync("GetAuthorList", new object[] {
                        AuthorIDList,
                        MagazineIDList,
                        PaperIDList,
                        PublishedMagazineIDList}, this.GetAuthorListOperationCompleted, userState);
        }
        
        private void OnGetAuthorListOperationCompleted(object arg) {
            if ((this.GetAuthorListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorListCompleted(this, new GetAuthorListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public User[] GetUserList(string UserIDlist, bool onlyActiveRecords, System.DateTime minActivationDate) {
            object[] results = this.Invoke("GetUserList", new object[] {
                        UserIDlist,
                        onlyActiveRecords,
                        minActivationDate});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserListAsync(string UserIDlist, bool onlyActiveRecords, System.DateTime minActivationDate) {
            this.GetUserListAsync(UserIDlist, onlyActiveRecords, minActivationDate, null);
        }
        
        /// <remarks/>
        public void GetUserListAsync(string UserIDlist, bool onlyActiveRecords, System.DateTime minActivationDate, object userState) {
            if ((this.GetUserListOperationCompleted == null)) {
                this.GetUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserListOperationCompleted);
            }
            this.InvokeAsync("GetUserList", new object[] {
                        UserIDlist,
                        onlyActiveRecords,
                        minActivationDate}, this.GetUserListOperationCompleted, userState);
        }
        
        private void OnGetUserListOperationCompleted(object arg) {
            if ((this.GetUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserListCompleted(this, new GetUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSystemAdminList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemAdmin[] GetSystemAdminList(string SystemAdminIDList, bool onlyActiveRecords, System.DateTime minActivationDate) {
            object[] results = this.Invoke("GetSystemAdminList", new object[] {
                        SystemAdminIDList,
                        onlyActiveRecords,
                        minActivationDate});
            return ((SystemAdmin[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemAdminListAsync(string SystemAdminIDList, bool onlyActiveRecords, System.DateTime minActivationDate) {
            this.GetSystemAdminListAsync(SystemAdminIDList, onlyActiveRecords, minActivationDate, null);
        }
        
        /// <remarks/>
        public void GetSystemAdminListAsync(string SystemAdminIDList, bool onlyActiveRecords, System.DateTime minActivationDate, object userState) {
            if ((this.GetSystemAdminListOperationCompleted == null)) {
                this.GetSystemAdminListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemAdminListOperationCompleted);
            }
            this.InvokeAsync("GetSystemAdminList", new object[] {
                        SystemAdminIDList,
                        onlyActiveRecords,
                        minActivationDate}, this.GetSystemAdminListOperationCompleted, userState);
        }
        
        private void OnGetSystemAdminListOperationCompleted(object arg) {
            if ((this.GetSystemAdminListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemAdminListCompleted(this, new GetSystemAdminListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRefereeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Referee[] GetRefereeList(string RefereeIDList, bool onlyActiveRecords, string MagazineIDList, string PublishedMagazineList) {
            object[] results = this.Invoke("GetRefereeList", new object[] {
                        RefereeIDList,
                        onlyActiveRecords,
                        MagazineIDList,
                        PublishedMagazineList});
            return ((Referee[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRefereeListAsync(string RefereeIDList, bool onlyActiveRecords, string MagazineIDList, string PublishedMagazineList) {
            this.GetRefereeListAsync(RefereeIDList, onlyActiveRecords, MagazineIDList, PublishedMagazineList, null);
        }
        
        /// <remarks/>
        public void GetRefereeListAsync(string RefereeIDList, bool onlyActiveRecords, string MagazineIDList, string PublishedMagazineList, object userState) {
            if ((this.GetRefereeListOperationCompleted == null)) {
                this.GetRefereeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRefereeListOperationCompleted);
            }
            this.InvokeAsync("GetRefereeList", new object[] {
                        RefereeIDList,
                        onlyActiveRecords,
                        MagazineIDList,
                        PublishedMagazineList}, this.GetRefereeListOperationCompleted, userState);
        }
        
        private void OnGetRefereeListOperationCompleted(object arg) {
            if ((this.GetRefereeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRefereeListCompleted(this, new GetRefereeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetModeratorList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Moderator[] GetModeratorList(string ModeratorIDList, bool onlyActiveRecords) {
            object[] results = this.Invoke("GetModeratorList", new object[] {
                        ModeratorIDList,
                        onlyActiveRecords});
            return ((Moderator[])(results[0]));
        }
        
        /// <remarks/>
        public void GetModeratorListAsync(string ModeratorIDList, bool onlyActiveRecords) {
            this.GetModeratorListAsync(ModeratorIDList, onlyActiveRecords, null);
        }
        
        /// <remarks/>
        public void GetModeratorListAsync(string ModeratorIDList, bool onlyActiveRecords, object userState) {
            if ((this.GetModeratorListOperationCompleted == null)) {
                this.GetModeratorListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModeratorListOperationCompleted);
            }
            this.InvokeAsync("GetModeratorList", new object[] {
                        ModeratorIDList,
                        onlyActiveRecords}, this.GetModeratorListOperationCompleted, userState);
        }
        
        private void OnGetModeratorListOperationCompleted(object arg) {
            if ((this.GetModeratorListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModeratorListCompleted(this, new GetModeratorListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMagazineList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Magazine[] GetMagazineList(string MagazineIDList, int PublisherID, bool onlyActiveRecords) {
            object[] results = this.Invoke("GetMagazineList", new object[] {
                        MagazineIDList,
                        PublisherID,
                        onlyActiveRecords});
            return ((Magazine[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMagazineListAsync(string MagazineIDList, int PublisherID, bool onlyActiveRecords) {
            this.GetMagazineListAsync(MagazineIDList, PublisherID, onlyActiveRecords, null);
        }
        
        /// <remarks/>
        public void GetMagazineListAsync(string MagazineIDList, int PublisherID, bool onlyActiveRecords, object userState) {
            if ((this.GetMagazineListOperationCompleted == null)) {
                this.GetMagazineListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMagazineListOperationCompleted);
            }
            this.InvokeAsync("GetMagazineList", new object[] {
                        MagazineIDList,
                        PublisherID,
                        onlyActiveRecords}, this.GetMagazineListOperationCompleted, userState);
        }
        
        private void OnGetMagazineListOperationCompleted(object arg) {
            if ((this.GetMagazineListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMagazineListCompleted(this, new GetMagazineListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublisheMagazineList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PublishedMagazine[] GetPublisheMagazineList(string MagazineIDList, string PublishedMagazineIDList, bool onlyActiveRecords) {
            object[] results = this.Invoke("GetPublisheMagazineList", new object[] {
                        MagazineIDList,
                        PublishedMagazineIDList,
                        onlyActiveRecords});
            return ((PublishedMagazine[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPublisheMagazineListAsync(string MagazineIDList, string PublishedMagazineIDList, bool onlyActiveRecords) {
            this.GetPublisheMagazineListAsync(MagazineIDList, PublishedMagazineIDList, onlyActiveRecords, null);
        }
        
        /// <remarks/>
        public void GetPublisheMagazineListAsync(string MagazineIDList, string PublishedMagazineIDList, bool onlyActiveRecords, object userState) {
            if ((this.GetPublisheMagazineListOperationCompleted == null)) {
                this.GetPublisheMagazineListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublisheMagazineListOperationCompleted);
            }
            this.InvokeAsync("GetPublisheMagazineList", new object[] {
                        MagazineIDList,
                        PublishedMagazineIDList,
                        onlyActiveRecords}, this.GetPublisheMagazineListOperationCompleted, userState);
        }
        
        private void OnGetPublisheMagazineListOperationCompleted(object arg) {
            if ((this.GetPublisheMagazineListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublisheMagazineListCompleted(this, new GetPublisheMagazineListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCommentList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Comment[] GetCommentList(string PaperIDList, int RefereeID, bool onlyActiveRecords) {
            object[] results = this.Invoke("GetCommentList", new object[] {
                        PaperIDList,
                        RefereeID,
                        onlyActiveRecords});
            return ((Comment[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCommentListAsync(string PaperIDList, int RefereeID, bool onlyActiveRecords) {
            this.GetCommentListAsync(PaperIDList, RefereeID, onlyActiveRecords, null);
        }
        
        /// <remarks/>
        public void GetCommentListAsync(string PaperIDList, int RefereeID, bool onlyActiveRecords, object userState) {
            if ((this.GetCommentListOperationCompleted == null)) {
                this.GetCommentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommentListOperationCompleted);
            }
            this.InvokeAsync("GetCommentList", new object[] {
                        PaperIDList,
                        RefereeID,
                        onlyActiveRecords}, this.GetCommentListOperationCompleted, userState);
        }
        
        private void OnGetCommentListOperationCompleted(object arg) {
            if ((this.GetCommentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommentListCompleted(this, new GetCommentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPaperList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Paper[] GetPaperList(string PublishedMagazineIDList, string MagazineIDList, string PaperIDList, int RefereeID, int PublisherID, int AuthorID, string category, string subCategory, bool onlyActiveRecords) {
            object[] results = this.Invoke("GetPaperList", new object[] {
                        PublishedMagazineIDList,
                        MagazineIDList,
                        PaperIDList,
                        RefereeID,
                        PublisherID,
                        AuthorID,
                        category,
                        subCategory,
                        onlyActiveRecords});
            return ((Paper[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPaperListAsync(string PublishedMagazineIDList, string MagazineIDList, string PaperIDList, int RefereeID, int PublisherID, int AuthorID, string category, string subCategory, bool onlyActiveRecords) {
            this.GetPaperListAsync(PublishedMagazineIDList, MagazineIDList, PaperIDList, RefereeID, PublisherID, AuthorID, category, subCategory, onlyActiveRecords, null);
        }
        
        /// <remarks/>
        public void GetPaperListAsync(string PublishedMagazineIDList, string MagazineIDList, string PaperIDList, int RefereeID, int PublisherID, int AuthorID, string category, string subCategory, bool onlyActiveRecords, object userState) {
            if ((this.GetPaperListOperationCompleted == null)) {
                this.GetPaperListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaperListOperationCompleted);
            }
            this.InvokeAsync("GetPaperList", new object[] {
                        PublishedMagazineIDList,
                        MagazineIDList,
                        PaperIDList,
                        RefereeID,
                        PublisherID,
                        AuthorID,
                        category,
                        subCategory,
                        onlyActiveRecords}, this.GetPaperListOperationCompleted, userState);
        }
        
        private void OnGetPaperListOperationCompleted(object arg) {
            if ((this.GetPaperListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaperListCompleted(this, new GetPaperListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetScienceCategoryList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ScienceCategory[] GetScienceCategoryList(bool onlyActiveRecords, int SubCategoryID, int MagazineID) {
            object[] results = this.Invoke("GetScienceCategoryList", new object[] {
                        onlyActiveRecords,
                        SubCategoryID,
                        MagazineID});
            return ((ScienceCategory[])(results[0]));
        }
        
        /// <remarks/>
        public void GetScienceCategoryListAsync(bool onlyActiveRecords, int SubCategoryID, int MagazineID) {
            this.GetScienceCategoryListAsync(onlyActiveRecords, SubCategoryID, MagazineID, null);
        }
        
        /// <remarks/>
        public void GetScienceCategoryListAsync(bool onlyActiveRecords, int SubCategoryID, int MagazineID, object userState) {
            if ((this.GetScienceCategoryListOperationCompleted == null)) {
                this.GetScienceCategoryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScienceCategoryListOperationCompleted);
            }
            this.InvokeAsync("GetScienceCategoryList", new object[] {
                        onlyActiveRecords,
                        SubCategoryID,
                        MagazineID}, this.GetScienceCategoryListOperationCompleted, userState);
        }
        
        private void OnGetScienceCategoryListOperationCompleted(object arg) {
            if ((this.GetScienceCategoryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScienceCategoryListCompleted(this, new GetScienceCategoryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubCategoryList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SubCategory[] GetSubCategoryList(bool onlyActiveRecords, string scienceCAtegorylist, int MagazineID) {
            object[] results = this.Invoke("GetSubCategoryList", new object[] {
                        onlyActiveRecords,
                        scienceCAtegorylist,
                        MagazineID});
            return ((SubCategory[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSubCategoryListAsync(bool onlyActiveRecords, string scienceCAtegorylist, int MagazineID) {
            this.GetSubCategoryListAsync(onlyActiveRecords, scienceCAtegorylist, MagazineID, null);
        }
        
        /// <remarks/>
        public void GetSubCategoryListAsync(bool onlyActiveRecords, string scienceCAtegorylist, int MagazineID, object userState) {
            if ((this.GetSubCategoryListOperationCompleted == null)) {
                this.GetSubCategoryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubCategoryListOperationCompleted);
            }
            this.InvokeAsync("GetSubCategoryList", new object[] {
                        onlyActiveRecords,
                        scienceCAtegorylist,
                        MagazineID}, this.GetSubCategoryListOperationCompleted, userState);
        }
        
        private void OnGetSubCategoryListOperationCompleted(object arg) {
            if ((this.GetSubCategoryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubCategoryListCompleted(this, new GetSubCategoryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSSurveyQuestionaryList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SurveyQuestionary[] GetSSurveyQuestionaryList(bool onlyActiveRecords, int MagazineID, int SurveyID) {
            object[] results = this.Invoke("GetSSurveyQuestionaryList", new object[] {
                        onlyActiveRecords,
                        MagazineID,
                        SurveyID});
            return ((SurveyQuestionary[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSSurveyQuestionaryListAsync(bool onlyActiveRecords, int MagazineID, int SurveyID) {
            this.GetSSurveyQuestionaryListAsync(onlyActiveRecords, MagazineID, SurveyID, null);
        }
        
        /// <remarks/>
        public void GetSSurveyQuestionaryListAsync(bool onlyActiveRecords, int MagazineID, int SurveyID, object userState) {
            if ((this.GetSSurveyQuestionaryListOperationCompleted == null)) {
                this.GetSSurveyQuestionaryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSSurveyQuestionaryListOperationCompleted);
            }
            this.InvokeAsync("GetSSurveyQuestionaryList", new object[] {
                        onlyActiveRecords,
                        MagazineID,
                        SurveyID}, this.GetSSurveyQuestionaryListOperationCompleted, userState);
        }
        
        private void OnGetSSurveyQuestionaryListOperationCompleted(object arg) {
            if ((this.GetSSurveyQuestionaryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSSurveyQuestionaryListCompleted(this, new GetSSurveyQuestionaryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSurveyAnswer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddSurveyAnswer(SurveyAnswer sa) {
            object[] results = this.Invoke("AddSurveyAnswer", new object[] {
                        sa});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddSurveyAnswerAsync(SurveyAnswer sa) {
            this.AddSurveyAnswerAsync(sa, null);
        }
        
        /// <remarks/>
        public void AddSurveyAnswerAsync(SurveyAnswer sa, object userState) {
            if ((this.AddSurveyAnswerOperationCompleted == null)) {
                this.AddSurveyAnswerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSurveyAnswerOperationCompleted);
            }
            this.InvokeAsync("AddSurveyAnswer", new object[] {
                        sa}, this.AddSurveyAnswerOperationCompleted, userState);
        }
        
        private void OnAddSurveyAnswerOperationCompleted(object arg) {
            if ((this.AddSurveyAnswerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSurveyAnswerCompleted(this, new AddSurveyAnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSurveyAnswer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSurveyAnswer(int SurveyAnswerID) {
            this.Invoke("DeleteSurveyAnswer", new object[] {
                        SurveyAnswerID});
        }
        
        /// <remarks/>
        public void DeleteSurveyAnswerAsync(int SurveyAnswerID) {
            this.DeleteSurveyAnswerAsync(SurveyAnswerID, null);
        }
        
        /// <remarks/>
        public void DeleteSurveyAnswerAsync(int SurveyAnswerID, object userState) {
            if ((this.DeleteSurveyAnswerOperationCompleted == null)) {
                this.DeleteSurveyAnswerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSurveyAnswerOperationCompleted);
            }
            this.InvokeAsync("DeleteSurveyAnswer", new object[] {
                        SurveyAnswerID}, this.DeleteSurveyAnswerOperationCompleted, userState);
        }
        
        private void OnDeleteSurveyAnswerOperationCompleted(object arg) {
            if ((this.DeleteSurveyAnswerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSurveyAnswerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSubCategoryToScienceCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSubCategoryToScienceCategory(int SubCategoryId, int ScienceCategoryId) {
            this.Invoke("AddSubCategoryToScienceCategory", new object[] {
                        SubCategoryId,
                        ScienceCategoryId});
        }
        
        /// <remarks/>
        public void AddSubCategoryToScienceCategoryAsync(int SubCategoryId, int ScienceCategoryId) {
            this.AddSubCategoryToScienceCategoryAsync(SubCategoryId, ScienceCategoryId, null);
        }
        
        /// <remarks/>
        public void AddSubCategoryToScienceCategoryAsync(int SubCategoryId, int ScienceCategoryId, object userState) {
            if ((this.AddSubCategoryToScienceCategoryOperationCompleted == null)) {
                this.AddSubCategoryToScienceCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubCategoryToScienceCategoryOperationCompleted);
            }
            this.InvokeAsync("AddSubCategoryToScienceCategory", new object[] {
                        SubCategoryId,
                        ScienceCategoryId}, this.AddSubCategoryToScienceCategoryOperationCompleted, userState);
        }
        
        private void OnAddSubCategoryToScienceCategoryOperationCompleted(object arg) {
            if ((this.AddSubCategoryToScienceCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubCategoryToScienceCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSubCategoryToMagazine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSubCategoryToMagazine(int SubCategoryId, int MagazineId) {
            this.Invoke("AddSubCategoryToMagazine", new object[] {
                        SubCategoryId,
                        MagazineId});
        }
        
        /// <remarks/>
        public void AddSubCategoryToMagazineAsync(int SubCategoryId, int MagazineId) {
            this.AddSubCategoryToMagazineAsync(SubCategoryId, MagazineId, null);
        }
        
        /// <remarks/>
        public void AddSubCategoryToMagazineAsync(int SubCategoryId, int MagazineId, object userState) {
            if ((this.AddSubCategoryToMagazineOperationCompleted == null)) {
                this.AddSubCategoryToMagazineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubCategoryToMagazineOperationCompleted);
            }
            this.InvokeAsync("AddSubCategoryToMagazine", new object[] {
                        SubCategoryId,
                        MagazineId}, this.AddSubCategoryToMagazineOperationCompleted, userState);
        }
        
        private void OnAddSubCategoryToMagazineOperationCompleted(object arg) {
            if ((this.AddSubCategoryToMagazineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubCategoryToMagazineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublisherList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Publisher[] GetPublisherList(string PublisherIDList, bool onlyActiveRecords) {
            object[] results = this.Invoke("GetPublisherList", new object[] {
                        PublisherIDList,
                        onlyActiveRecords});
            return ((Publisher[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPublisherListAsync(string PublisherIDList, bool onlyActiveRecords) {
            this.GetPublisherListAsync(PublisherIDList, onlyActiveRecords, null);
        }
        
        /// <remarks/>
        public void GetPublisherListAsync(string PublisherIDList, bool onlyActiveRecords, object userState) {
            if ((this.GetPublisherListOperationCompleted == null)) {
                this.GetPublisherListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublisherListOperationCompleted);
            }
            this.InvokeAsync("GetPublisherList", new object[] {
                        PublisherIDList,
                        onlyActiveRecords}, this.GetPublisherListOperationCompleted, userState);
        }
        
        private void OnGetPublisherListOperationCompleted(object arg) {
            if ((this.GetPublisherListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublisherListCompleted(this, new GetPublisherListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSurvey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Survey[] GetSurvey(bool onlyActiveRecords, int MagazineID, int SurveyID) {
            object[] results = this.Invoke("GetSurvey", new object[] {
                        onlyActiveRecords,
                        MagazineID,
                        SurveyID});
            return ((Survey[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSurveyAsync(bool onlyActiveRecords, int MagazineID, int SurveyID) {
            this.GetSurveyAsync(onlyActiveRecords, MagazineID, SurveyID, null);
        }
        
        /// <remarks/>
        public void GetSurveyAsync(bool onlyActiveRecords, int MagazineID, int SurveyID, object userState) {
            if ((this.GetSurveyOperationCompleted == null)) {
                this.GetSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurveyOperationCompleted);
            }
            this.InvokeAsync("GetSurvey", new object[] {
                        onlyActiveRecords,
                        MagazineID,
                        SurveyID}, this.GetSurveyOperationCompleted, userState);
        }
        
        private void OnGetSurveyOperationCompleted(object arg) {
            if ((this.GetSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurveyCompleted(this, new GetSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRefereeNotesOnPaper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Paper[] GetRefereeNotesOnPaper(int PaperID) {
            object[] results = this.Invoke("GetRefereeNotesOnPaper", new object[] {
                        PaperID});
            return ((Paper[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRefereeNotesOnPaperAsync(int PaperID) {
            this.GetRefereeNotesOnPaperAsync(PaperID, null);
        }
        
        /// <remarks/>
        public void GetRefereeNotesOnPaperAsync(int PaperID, object userState) {
            if ((this.GetRefereeNotesOnPaperOperationCompleted == null)) {
                this.GetRefereeNotesOnPaperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRefereeNotesOnPaperOperationCompleted);
            }
            this.InvokeAsync("GetRefereeNotesOnPaper", new object[] {
                        PaperID}, this.GetRefereeNotesOnPaperOperationCompleted, userState);
        }
        
        private void OnGetRefereeNotesOnPaperOperationCompleted(object arg) {
            if ((this.GetRefereeNotesOnPaperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRefereeNotesOnPaperCompleted(this, new GetRefereeNotesOnPaperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReferenceList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetReferenceList(int MainPaperID, int ReferencedPaperId) {
            object[] results = this.Invoke("GetReferenceList", new object[] {
                        MainPaperID,
                        ReferencedPaperId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetReferenceListAsync(int MainPaperID, int ReferencedPaperId) {
            this.GetReferenceListAsync(MainPaperID, ReferencedPaperId, null);
        }
        
        /// <remarks/>
        public void GetReferenceListAsync(int MainPaperID, int ReferencedPaperId, object userState) {
            if ((this.GetReferenceListOperationCompleted == null)) {
                this.GetReferenceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReferenceListOperationCompleted);
            }
            this.InvokeAsync("GetReferenceList", new object[] {
                        MainPaperID,
                        ReferencedPaperId}, this.GetReferenceListOperationCompleted, userState);
        }
        
        private void OnGetReferenceListOperationCompleted(object arg) {
            if ((this.GetReferenceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReferenceListCompleted(this, new GetReferenceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SystemAdmin))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Moderator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Author))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Publisher))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Referee))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class User : AnonimUser {
        
        private int userIDField;
        
        private string userNameField;
        
        private string passWordField;
        
        private string nameField;
        
        private string surNameField;
        
        private int isActiveField;
        
        private string photoFilePathField;
        
        private int[] userTypeField;
        
        private string isActiveTextField;
        
        /// <remarks/>
        public int userID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string passWord {
            get {
                return this.passWordField;
            }
            set {
                this.passWordField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string surName {
            get {
                return this.surNameField;
            }
            set {
                this.surNameField = value;
            }
        }
        
        /// <remarks/>
        public int isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public string photoFilePath {
            get {
                return this.photoFilePathField;
            }
            set {
                this.photoFilePathField = value;
            }
        }
        
        /// <remarks/>
        public int[] userType {
            get {
                return this.userTypeField;
            }
            set {
                this.userTypeField = value;
            }
        }
        
        /// <remarks/>
        public string isActiveText {
            get {
                return this.isActiveTextField;
            }
            set {
                this.isActiveTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(User))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SystemAdmin))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Moderator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Author))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Publisher))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Referee))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AnonimUser {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SurveyAnswer {
        
        private int idField;
        
        private int surveyQuestionaryidField;
        
        private string answerField;
        
        private int paperRefField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int surveyQuestionaryid {
            get {
                return this.surveyQuestionaryidField;
            }
            set {
                this.surveyQuestionaryidField = value;
            }
        }
        
        /// <remarks/>
        public string answer {
            get {
                return this.answerField;
            }
            set {
                this.answerField = value;
            }
        }
        
        /// <remarks/>
        public int PaperRef {
            get {
                return this.paperRefField;
            }
            set {
                this.paperRefField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PublishedMagazine {
        
        private int idField;
        
        private int magazinePublishStateField;
        
        private string magazinePublishNoField;
        
        private System.DateTime publishDateField;
        
        private Magazine mgznField;
        
        private Paper[] paperListField;
        
        private int paperCountField;
        
        private int isActiveField;
        
        private int magazineRefField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int MagazinePublishState {
            get {
                return this.magazinePublishStateField;
            }
            set {
                this.magazinePublishStateField = value;
            }
        }
        
        /// <remarks/>
        public string MagazinePublishNo {
            get {
                return this.magazinePublishNoField;
            }
            set {
                this.magazinePublishNoField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime PublishDate {
            get {
                return this.publishDateField;
            }
            set {
                this.publishDateField = value;
            }
        }
        
        /// <remarks/>
        public Magazine mgzn {
            get {
                return this.mgznField;
            }
            set {
                this.mgznField = value;
            }
        }
        
        /// <remarks/>
        public Paper[] paperList {
            get {
                return this.paperListField;
            }
            set {
                this.paperListField = value;
            }
        }
        
        /// <remarks/>
        public int paperCount {
            get {
                return this.paperCountField;
            }
            set {
                this.paperCountField = value;
            }
        }
        
        /// <remarks/>
        public int isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public int MagazineRef {
            get {
                return this.magazineRefField;
            }
            set {
                this.magazineRefField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Magazine {
        
        private int publisherIdField;
        
        private int idField;
        
        private string nameField;
        
        private SubCategory[] subCategoriesField;
        
        private PublishedMagazine[] publishedMagazinesField;
        
        private Paper[] approvedPaperListField;
        
        private int maxPaperCountField;
        
        private int isActiveField;
        
        /// <remarks/>
        public int publisherId {
            get {
                return this.publisherIdField;
            }
            set {
                this.publisherIdField = value;
            }
        }
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public SubCategory[] subCategories {
            get {
                return this.subCategoriesField;
            }
            set {
                this.subCategoriesField = value;
            }
        }
        
        /// <remarks/>
        public PublishedMagazine[] publishedMagazines {
            get {
                return this.publishedMagazinesField;
            }
            set {
                this.publishedMagazinesField = value;
            }
        }
        
        /// <remarks/>
        public Paper[] ApprovedPaperList {
            get {
                return this.approvedPaperListField;
            }
            set {
                this.approvedPaperListField = value;
            }
        }
        
        /// <remarks/>
        public int maxPaperCount {
            get {
                return this.maxPaperCountField;
            }
            set {
                this.maxPaperCountField = value;
            }
        }
        
        /// <remarks/>
        public int isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SubCategory {
        
        private int idField;
        
        private ScienceCategory[] scienceCategoryListField;
        
        private string nameField;
        
        private int isActiveField;
        
        private int approvalStateField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public ScienceCategory[] scienceCategoryList {
            get {
                return this.scienceCategoryListField;
            }
            set {
                this.scienceCategoryListField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public int approvalState {
            get {
                return this.approvalStateField;
            }
            set {
                this.approvalStateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ScienceCategory {
        
        private int idField;
        
        private string nameField;
        
        private int isActiveField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Paper {
        
        private int idField;
        
        private int authorIdField;
        
        private SubCategory[] subCategoriesField;
        
        private int approvalStateField;
        
        private string contentPathField;
        
        private System.DateTime approvalDateField;
        
        private Referee[] refereesField;
        
        private string[] referencePaperIDField;
        
        private string publishedIdField;
        
        private double versionField;
        
        private Survey surveyField;
        
        private string titleField;
        
        private string publisherCommentField;
        
        private Comment[] commentsField;
        
        private int magazineIDField;
        
        private string magazineNameField;
        
        private string authorNameField;
        
        private int publishedMagazineIDField;
        
        private int isActiveField;
        
        private string approvalStateTextField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int authorId {
            get {
                return this.authorIdField;
            }
            set {
                this.authorIdField = value;
            }
        }
        
        /// <remarks/>
        public SubCategory[] subCategories {
            get {
                return this.subCategoriesField;
            }
            set {
                this.subCategoriesField = value;
            }
        }
        
        /// <remarks/>
        public int approvalState {
            get {
                return this.approvalStateField;
            }
            set {
                this.approvalStateField = value;
            }
        }
        
        /// <remarks/>
        public string contentPath {
            get {
                return this.contentPathField;
            }
            set {
                this.contentPathField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime approvalDate {
            get {
                return this.approvalDateField;
            }
            set {
                this.approvalDateField = value;
            }
        }
        
        /// <remarks/>
        public Referee[] referees {
            get {
                return this.refereesField;
            }
            set {
                this.refereesField = value;
            }
        }
        
        /// <remarks/>
        public string[] referencePaperID {
            get {
                return this.referencePaperIDField;
            }
            set {
                this.referencePaperIDField = value;
            }
        }
        
        /// <remarks/>
        public string publishedId {
            get {
                return this.publishedIdField;
            }
            set {
                this.publishedIdField = value;
            }
        }
        
        /// <remarks/>
        public double version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public Survey survey {
            get {
                return this.surveyField;
            }
            set {
                this.surveyField = value;
            }
        }
        
        /// <remarks/>
        public string title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string publisherComment {
            get {
                return this.publisherCommentField;
            }
            set {
                this.publisherCommentField = value;
            }
        }
        
        /// <remarks/>
        public Comment[] comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        public int MagazineID {
            get {
                return this.magazineIDField;
            }
            set {
                this.magazineIDField = value;
            }
        }
        
        /// <remarks/>
        public string MagazineName {
            get {
                return this.magazineNameField;
            }
            set {
                this.magazineNameField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorName {
            get {
                return this.authorNameField;
            }
            set {
                this.authorNameField = value;
            }
        }
        
        /// <remarks/>
        public int PublishedMagazineID {
            get {
                return this.publishedMagazineIDField;
            }
            set {
                this.publishedMagazineIDField = value;
            }
        }
        
        /// <remarks/>
        public int isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public string ApprovalStateText {
            get {
                return this.approvalStateTextField;
            }
            set {
                this.approvalStateTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Referee : Author {
        
        private Paper[] papersField;
        
        /// <remarks/>
        public Paper[] papers {
            get {
                return this.papersField;
            }
            set {
                this.papersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Publisher))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Referee))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Author : User {
        
        private string professionField;
        
        private int paperCountField;
        
        private string resumeField;
        
        private Paper[] paperListField;
        
        /// <remarks/>
        public string profession {
            get {
                return this.professionField;
            }
            set {
                this.professionField = value;
            }
        }
        
        /// <remarks/>
        public int paperCount {
            get {
                return this.paperCountField;
            }
            set {
                this.paperCountField = value;
            }
        }
        
        /// <remarks/>
        public string resume {
            get {
                return this.resumeField;
            }
            set {
                this.resumeField = value;
            }
        }
        
        /// <remarks/>
        public Paper[] paperList {
            get {
                return this.paperListField;
            }
            set {
                this.paperListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Publisher : Author {
        
        private Magazine[] magazinesField;
        
        /// <remarks/>
        public Magazine[] magazines {
            get {
                return this.magazinesField;
            }
            set {
                this.magazinesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Survey {
        
        private int idField;
        
        private int magazineIdField;
        
        private SurveyQuestionary[] surveyQuestionaryField;
        
        private int isActiveField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int magazineId {
            get {
                return this.magazineIdField;
            }
            set {
                this.magazineIdField = value;
            }
        }
        
        /// <remarks/>
        public SurveyQuestionary[] surveyQuestionary {
            get {
                return this.surveyQuestionaryField;
            }
            set {
                this.surveyQuestionaryField = value;
            }
        }
        
        /// <remarks/>
        public int isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SurveyQuestionary {
        
        private int idField;
        
        private string questionField;
        
        private int isActiveField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string question {
            get {
                return this.questionField;
            }
            set {
                this.questionField = value;
            }
        }
        
        /// <remarks/>
        public int isActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Comment {
        
        private int idField;
        
        private int commentTypeField;
        
        private string contentField;
        
        private int paperIdField;
        
        private int userIdField;
        
        private int approvalStateField;
        
        private System.DateTime commentDateField;
        
        private string yorumuYazanField;
        
        private string makaleAdiField;
        
        private string approvalStateTextField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int commentType {
            get {
                return this.commentTypeField;
            }
            set {
                this.commentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        public int paperId {
            get {
                return this.paperIdField;
            }
            set {
                this.paperIdField = value;
            }
        }
        
        /// <remarks/>
        public int userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public int approvalState {
            get {
                return this.approvalStateField;
            }
            set {
                this.approvalStateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime commentDate {
            get {
                return this.commentDateField;
            }
            set {
                this.commentDateField = value;
            }
        }
        
        /// <remarks/>
        public string YorumuYazan {
            get {
                return this.yorumuYazanField;
            }
            set {
                this.yorumuYazanField = value;
            }
        }
        
        /// <remarks/>
        public string MakaleAdi {
            get {
                return this.makaleAdiField;
            }
            set {
                this.makaleAdiField = value;
            }
        }
        
        /// <remarks/>
        public string ApprovalStateText {
            get {
                return this.approvalStateTextField;
            }
            set {
                this.approvalStateTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SystemAdmin : User {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Moderator : User {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserByIDCompletedEventHandler(object sender, GetUserByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckUserPassCompletedEventHandler(object sender, CheckUserPassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserPassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUserPassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddMagazineCompletedEventHandler(object sender, AddMagazineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMagazineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMagazineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteMagazineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateMagazineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSubCategoryCompletedEventHandler(object sender, AddSubCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteSubCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateSubCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddRefereeCompletedEventHandler(object sender, AddRefereeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRefereeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRefereeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteRefereeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateRefereeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddAuthorCompletedEventHandler(object sender, AddAuthorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAuthorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAuthorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteAuthorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateAuthorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ApproveSubCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddScienceCategoryCompletedEventHandler(object sender, AddScienceCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddScienceCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddScienceCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSubCategorytoPaperCompletedEventHandler(object sender, AddSubCategorytoPaperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubCategorytoPaperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubCategorytoPaperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddReferencetoPaperCompletedEventHandler(object sender, AddReferencetoPaperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddReferencetoPaperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddReferencetoPaperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteScienceCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateScienceCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddPublisherCompletedEventHandler(object sender, AddPublisherCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPublisherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPublisherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeletePublisherCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePublisherCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddModeratorCompletedEventHandler(object sender, AddModeratorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddModeratorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddModeratorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteModeratorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateModeratorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddPaperCompletedEventHandler(object sender, AddPaperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPaperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPaperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeletePaperCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePaperCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BackUpDBCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExaminePaperCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendOpinionToPublisherCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendPaperToRefereeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendPaperBackToWriterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InviteRefereeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AnswerSurveyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddUserCompletedEventHandler(object sender, AddUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddAnonimUserCompletedEventHandler(object sender, AddAnonimUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAnonimUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAnonimUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteAnonimUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateAnonimUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ActivateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeactivateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddCommentCompletedEventHandler(object sender, AddCommentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteCommentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateCommentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ApproveCommentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddPaperToMagazineCompletedEventHandler(object sender, AddPaperToMagazineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPaperToMagazineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPaperToMagazineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PublishMagazineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreatePublishedPaperIDCompletedEventHandler(object sender, CreatePublishedPaperIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePublishedPaperIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePublishedPaperIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSurveyCompletedEventHandler(object sender, AddSurveyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSurveyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSurveyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteSurveyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateSurveyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSurveyQuestionaryCompletedEventHandler(object sender, AddSurveyQuestionaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSurveyQuestionaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSurveyQuestionaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteSurveyQuestionaryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateSurveyQuestionaryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddPublishedMagazineCompletedEventHandler(object sender, AddPublishedMagazineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPublishedMagazineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPublishedMagazineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeletePublishedMagazineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePublishedMagazineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddPaperByAuthorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserTypesCompletedEventHandler(object sender, GetUserTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAuthorListCompletedEventHandler(object sender, GetAuthorListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Author[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Author[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserListCompletedEventHandler(object sender, GetUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSystemAdminListCompletedEventHandler(object sender, GetSystemAdminListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemAdminListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemAdminListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemAdmin[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemAdmin[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRefereeListCompletedEventHandler(object sender, GetRefereeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRefereeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRefereeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Referee[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Referee[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetModeratorListCompletedEventHandler(object sender, GetModeratorListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModeratorListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModeratorListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Moderator[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Moderator[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMagazineListCompletedEventHandler(object sender, GetMagazineListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMagazineListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMagazineListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Magazine[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Magazine[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPublisheMagazineListCompletedEventHandler(object sender, GetPublisheMagazineListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublisheMagazineListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublisheMagazineListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublishedMagazine[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublishedMagazine[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCommentListCompletedEventHandler(object sender, GetCommentListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Comment[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Comment[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPaperListCompletedEventHandler(object sender, GetPaperListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaperListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaperListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Paper[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Paper[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetScienceCategoryListCompletedEventHandler(object sender, GetScienceCategoryListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScienceCategoryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScienceCategoryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ScienceCategory[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ScienceCategory[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSubCategoryListCompletedEventHandler(object sender, GetSubCategoryListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubCategoryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubCategoryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubCategory[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubCategory[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSSurveyQuestionaryListCompletedEventHandler(object sender, GetSSurveyQuestionaryListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSSurveyQuestionaryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSSurveyQuestionaryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SurveyQuestionary[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SurveyQuestionary[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSurveyAnswerCompletedEventHandler(object sender, AddSurveyAnswerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSurveyAnswerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSurveyAnswerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteSurveyAnswerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSubCategoryToScienceCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSubCategoryToMagazineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPublisherListCompletedEventHandler(object sender, GetPublisherListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublisherListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublisherListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Publisher[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Publisher[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSurveyCompletedEventHandler(object sender, GetSurveyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSurveyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurveyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Survey[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Survey[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRefereeNotesOnPaperCompletedEventHandler(object sender, GetRefereeNotesOnPaperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRefereeNotesOnPaperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRefereeNotesOnPaperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Paper[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Paper[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReferenceListCompletedEventHandler(object sender, GetReferenceListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReferenceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReferenceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591